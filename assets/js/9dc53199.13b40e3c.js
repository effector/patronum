"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84],{4852:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(9231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(4011),r=(n(9231),n(4852));const o={},i="splitMap",p={unversionedId:"split-map/readme",id:"split-map/readme",title:"splitMap",description:"shape = splitMap({ source, cases })",source:"@site/../src/split-map/readme.md",sourceDirName:"split-map",slug:"/split-map/",permalink:"/methods/split-map/",draft:!1,editUrl:"https://github.com/effector/patronum/tree/main/src/../src/split-map/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"methodsSidebar",previous:{title:"some",permalink:"/methods/some/"},next:{title:"spread",permalink:"/methods/spread/"}},l={},s=[{value:"<code>shape = splitMap({ source, cases })</code>",id:"shape--splitmap-source-cases-",level:2},{value:"Motivation",id:"motivation",level:3},{value:"Formulae",id:"formulae",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Extract passed fields from optional object",id:"extract-passed-fields-from-optional-object",level:4},{value:"Split WebSocket events to effector events",id:"split-websocket-events-to-effector-events",level:4}],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"splitmap"},"splitMap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { splitMap } from 'patronum';\n// or\nimport { splitMap } from 'patronum/split-map';\n")),(0,r.kt)("h2",{id:"shape--splitmap-source-cases-"},(0,r.kt)("inlineCode",{parentName:"h2"},"shape = splitMap({ source, cases })")),(0,r.kt)("h3",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"The method is a combination of ",(0,r.kt)("a",{parentName:"p",href:"https://effector.dev/docs/api/effector/split"},(0,r.kt)("inlineCode",{parentName:"a"},"split"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://effector.dev/docs/api/effector/event#mapfn"},(0,r.kt)("inlineCode",{parentName:"a"},"map")),".\nIt is useful when you want add some kind of pattern matching."),(0,r.kt)("h3",{id:"formulae"},"Formulae"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"shape = splitMap({ source, cases });\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"On each ",(0,r.kt)("inlineCode",{parentName:"li"},"source")," trigger, call each function in ",(0,r.kt)("inlineCode",{parentName:"li"},"cases")," object one after another until function returns non undefined, and call event in ",(0,r.kt)("inlineCode",{parentName:"li"},"shape")," with the same name as function in ",(0,r.kt)("inlineCode",{parentName:"li"},"cases")," object."),(0,r.kt)("li",{parentName:"ul"},"If no function returned value event ",(0,r.kt)("inlineCode",{parentName:"li"},"__")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"shape")," should be triggered")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"source")," (",(0,r.kt)("a",{parentName:"li",href:"https://effector.dev/docs/api/effector/event"},(0,r.kt)("em",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"em"},"Event")))," | ",(0,r.kt)("a",{parentName:"li",href:"https://effector.dev/docs/api/effector/store"},(0,r.kt)("em",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"em"},"Store")))," | ",(0,r.kt)("a",{parentName:"li",href:"https://effector.dev/docs/api/effector/effect"},(0,r.kt)("em",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"em"},"Effect"))),") \u2014 Source unit, data from this unit passed to each function in ",(0,r.kt)("inlineCode",{parentName:"li"},"cases")," object and ",(0,r.kt)("inlineCode",{parentName:"li"},"__")," event in ",(0,r.kt)("inlineCode",{parentName:"li"},"shape")," as is"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"cases")," (",(0,r.kt)("inlineCode",{parentName:"li"},"{ [key: string]: (payload: T) => any | void }"),") \u2014 Object of functions. Function receives one argument is a payload from ",(0,r.kt)("inlineCode",{parentName:"li"},"source"),", should return any value or ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"))),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shape")," (",(0,r.kt)("inlineCode",{parentName:"li"},"{ [key: string]: Event<any>; __: Event<T> }"),") \u2014 Object of events, with the same structure as ",(0,r.kt)("inlineCode",{parentName:"li"},"cases"),", but with the ",(0,r.kt)("em",{parentName:"li"},"default")," event ",(0,r.kt)("inlineCode",{parentName:"li"},"__"),", that triggered when each other function returns ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"))),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("h4",{id:"extract-passed-fields-from-optional-object"},"Extract passed fields from optional object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createEvent } from 'effector';\nimport { splitMap } from 'patronum/split-map';\n\nconst event = createEvent<object>();\n\nconst shape = splitMap({\n  source: event,\n  cases: {\n    getType: (input) => input.type,\n    getDemo: (input) => input.demo,\n  },\n});\n\nshape.getType.watch((type) => console.log('TYPE', type));\nshape.getDemo.watch((demo) => console.log('DEMO', demo));\nshape.__.watch((other) => console.log('OTHER', other));\n\nevent({ type: 'demo' });\n// => TYPE demo\n\nevent({ demo: 5 });\n// => DEMO 5\n\nevent({});\n// => OTHER {}\n")),(0,r.kt)("h4",{id:"split-websocket-events-to-effector-events"},"Split WebSocket events to effector events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createEvent } from 'effector';\nimport { splitMap } from 'patronum/split-map';\n\ntype WSEvent =\n  | { type: 'init'; key: string }\n  | { type: 'increment'; count: number; name: string }\n  | { type: 'reset'; name: string };\n\nexport const websocketEventReceived = createEvent<WSEvent>();\n\nconst { init, increment, reset, __ } = splitMap({\n  source: websocketEventReceived,\n  cases: {\n    init: (event) => {\n      if (event.type === 'init') return event.key;\n    },\n    increment: ({ type, ...payload }) => {\n      if (type === 'increment') return payload;\n    },\n    reset: ({ type, name }) => {\n      if (type === 'reset') return name;\n    },\n  },\n});\n\n__.watch((payload) => {\n  console.warn('Unknown type:', payload.type);\n});\n\nincrement.watch((payload) => {\n  console.info('should be incremented', payload.count, payload.name);\n});\n\nwebsocketEventReceived({ type: 'increment', name: 'demo', count: 5 });\n// => should be incremented 5 'demo'\n\nwebsocketEventReceived({ type: 'bang', random: 'unknown' });\n// => Unknown type: 'bang'\n")))}d.isMDXComponent=!0}}]);