"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[502],{4852:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var a=r(9231);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),d=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(r),m=n,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return r?a.createElement(g,i(i({ref:t},p),{},{components:r})):a.createElement(g,i({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2200:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=r(4011),n=(r(9231),r(4852));const o={},i="spread",l={unversionedId:"spread/readme",id:"spread/readme",title:"spread",description:"source = spread(targets)",source:"@site/../src/spread/readme.md",sourceDirName:"spread",slug:"/spread/",permalink:"/methods/spread/",draft:!1,editUrl:"https://github.com/effector/patronum/tree/main/src/../src/spread/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"methodsSidebar",previous:{title:"splitMap",permalink:"/methods/split-map/"},next:{title:"status",permalink:"/methods/status/"}},s={},d=[{value:"<code>source = spread(targets)</code>",id:"source--spreadtargets",level:2},{value:"Motivation",id:"motivation",level:3},{value:"Formulae",id:"formulae",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"Conditionally save value to stores",id:"conditionally-save-value-to-stores",level:4},{value:"Nested spreading",id:"nested-spreading",level:4},{value:"<code>spread({ source, targets })</code>",id:"spread-source-targets-",level:2},{value:"Motivation",id:"motivation-1",level:3},{value:"Formulae",id:"formulae-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Save fields of payload to different stores",id:"save-fields-of-payload-to-different-stores",level:4},{value:"Call events on store changes",id:"call-events-on-store-changes",level:4},{value:"<code>source = spread({ targets })</code>",id:"source--spread-targets-",level:2},{value:"Motivation",id:"motivation-2",level:3},{value:"Formulae",id:"formulae-2",level:3},{value:"Arguments",id:"arguments-2",level:3},{value:"Returns",id:"returns-1",level:3}],p={toc:d},u="wrapper";function c(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"spread"},"spread"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { spread } from 'patronum';\n// or\nimport { spread } from 'patronum/spread';\n")),(0,n.kt)("h2",{id:"source--spreadtargets"},(0,n.kt)("inlineCode",{parentName:"h2"},"source = spread(targets)")),(0,n.kt)("admonition",{title:"since",type:"note"},(0,n.kt)("p",{parentName:"admonition"},"patronum 2.1.0\nUse ",(0,n.kt)("inlineCode",{parentName:"p"},"spread({ targets })")," with patronum < 2.1.0")),(0,n.kt)("h3",{id:"motivation"},"Motivation"),(0,n.kt)("p",null,"This method allows to trigger many target at once, if they match the source structure.\nIt is useful when you need to destructure object and save values to different stores."),(0,n.kt)("h3",{id:"formulae"},"Formulae"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"source = spread({ field: target, ... })\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"When ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," is triggered with ",(0,n.kt)("strong",{parentName:"li"},"object"),", extract ",(0,n.kt)("inlineCode",{parentName:"li"},"field")," from data, and trigger ",(0,n.kt)("inlineCode",{parentName:"li"},"target")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"targets")," can have multiple properties"),(0,n.kt)("li",{parentName:"ul"},"If the ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," was triggered with non-object, nothing would be happening"),(0,n.kt)("li",{parentName:"ul"},"If ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," is triggered with object but without property ",(0,n.kt)("inlineCode",{parentName:"li"},"field"),", target for this ",(0,n.kt)("inlineCode",{parentName:"li"},"field")," will not be triggered")),(0,n.kt)("h3",{id:"arguments"},"Arguments"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"targets")," ",(0,n.kt)("inlineCode",{parentName:"li"},"(Record<string, Event<T> | Store<T> | Effect<T>>)")," \u2014 Flat object which key is key in ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," payload, and value is unit to store value to.")),(0,n.kt)("h3",{id:"returns"},"Returns"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"source")," ",(0,n.kt)("inlineCode",{parentName:"li"},"(Event<T>)")," \u2014 Source event, data passed to it should be an object with fields from ",(0,n.kt)("inlineCode",{parentName:"li"},"targets"))),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("h4",{id:"conditionally-save-value-to-stores"},"Conditionally save value to stores"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore, createEvent, sample } from 'effector';\nimport { spread } from 'patronum';\n\nconst $first = createStore('');\nconst $last = createStore('');\n\nconst formReceived = createEvent();\n\nsample({\n  source: formReceived,\n  filter: (form) => form.first.length > 0 && form.last.length > 0,\n  target: spread({\n    first: $first,\n    last: $last,\n  }),\n});\n\n$first.watch((first) => console.log('First name', first));\n$last.watch((last) => console.log('Last name', last));\n\nformReceived({ first: '', last: '' });\n// Nothing, because filter returned false\n\nformReceived({ first: 'Hello', last: 'World' });\n// => First name Hello\n// => Last name World\n")),(0,n.kt)("h4",{id:"nested-spreading"},"Nested spreading"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const $targetA = createStore('');\nconst $targetB = createStore(0);\nconst $targetC = createStore(false);\n\nconst trigger = spread({\n  first: $targetA,\n  second: spread({\n    foo: $targetB,\n    bar: $targetC,\n  }),\n});\n\n$targetA.watch((payload) => console.log('targetA', payload));\n$targetB.watch((payload) => console.log('targetB', payload));\n$targetC.watch((payload) => console.log('targetC', payload));\n\ntrigger({\n  first: 'Hello',\n  second: {\n    foo: 200,\n    bar: true,\n  },\n});\n// => targetA Hello\n// => targetB 200\n// => targetC true\n")),(0,n.kt)("h2",{id:"spread-source-targets-"},(0,n.kt)("inlineCode",{parentName:"h2"},"spread({ source, targets })")),(0,n.kt)("h3",{id:"motivation-1"},"Motivation"),(0,n.kt)("p",null,"This method allows to trigger many target at once, if they match the source structure.\nIt is useful when you need to destructure object and save values to different stores."),(0,n.kt)("h3",{id:"formulae-1"},"Formulae"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"spread({ source, targets: { field: target, ... } })\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"When ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," is triggered with ",(0,n.kt)("strong",{parentName:"li"},"object"),", extract ",(0,n.kt)("inlineCode",{parentName:"li"},"field")," from data, and trigger ",(0,n.kt)("inlineCode",{parentName:"li"},"target")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"targets")," can have multiple properties"),(0,n.kt)("li",{parentName:"ul"},"If the ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," was triggered with non-object, nothing would be happening"),(0,n.kt)("li",{parentName:"ul"},"If ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," is triggered with object but without property ",(0,n.kt)("inlineCode",{parentName:"li"},"field"),", target for this ",(0,n.kt)("inlineCode",{parentName:"li"},"field")," will not be triggered")),(0,n.kt)("h3",{id:"arguments-1"},"Arguments"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"source")," ",(0,n.kt)("inlineCode",{parentName:"li"},"(Event<T>")," | ",(0,n.kt)("inlineCode",{parentName:"li"},"Store<T>")," | ",(0,n.kt)("inlineCode",{parentName:"li"},"Effect<T>)")," \u2014 Source unit, data passed to it should be an object with fields from ",(0,n.kt)("inlineCode",{parentName:"li"},"targets")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"targets")," ",(0,n.kt)("inlineCode",{parentName:"li"},"(Record<string, Event<T> | Store<T> | Effect<T>>)")," \u2014 Flat object which key is key in ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," payload, and value is unit to store value to.")),(0,n.kt)("h3",{id:"example-1"},"Example"),(0,n.kt)("h4",{id:"save-fields-of-payload-to-different-stores"},"Save fields of payload to different stores"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore, createEvent } from 'effector';\nimport { spread } from 'patronum';\n\nconst $first = createStore('');\nconst $last = createStore('');\n\nconst formReceived = createEvent();\n\nspread({\n  source: formReceived,\n  targets: {\n    first: $first,\n    last: $last,\n  },\n});\n\n$first.watch((first) => console.log('First name', first));\n$last.watch((last) => console.log('Last name', last));\n\nformReceived({ first: 'Sergey', last: 'Sova' });\n// => First name Sergey\n// => Last name Sova\n\nformReceived({ first: 'Patronum' });\n// => First name Patronum\n")),(0,n.kt)("h4",{id:"call-events-on-store-changes"},"Call events on store changes"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore, createEvent } from 'effector';\nimport { spread } from 'patronum/spread';\n\nconst save = createEvent();\nconst $form = createStore(null).on(save, (_, form) => form);\n\nconst firstNameChanged = createEvent();\nconst lastNameChanged = createEvent();\n\nspread({\n  source: $form,\n  targets: {\n    first: firstNameChanged,\n    last: lastNameChanged,\n  },\n});\n\nfirstNameChanged.watch((first) => console.log('First name', first));\nlastNameChanged.watch((last) => console.log('Last name', last));\n\nsave({ first: 'Sergey', last: 'Sova' });\n// => First name Sergey\n// => Last name Sova\n\nsave(null);\n// Nothing, because store is null\n")),(0,n.kt)("h2",{id:"source--spread-targets-"},(0,n.kt)("inlineCode",{parentName:"h2"},"source = spread({ targets })")),(0,n.kt)("h3",{id:"motivation-2"},"Motivation"),(0,n.kt)("p",null,"This overload receives ",(0,n.kt)("inlineCode",{parentName:"p"},"targets")," as an object. May be useful for additional clarity, but it's longer to write"),(0,n.kt)("h3",{id:"formulae-2"},"Formulae"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"source = spread({ targets: { field: target, ... } })\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"When ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," is triggered with ",(0,n.kt)("strong",{parentName:"li"},"object"),", extract ",(0,n.kt)("inlineCode",{parentName:"li"},"field")," from data, and trigger ",(0,n.kt)("inlineCode",{parentName:"li"},"target")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"targets")," can have multiple properties"),(0,n.kt)("li",{parentName:"ul"},"If the ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," was triggered with non-object, nothing would be happening"),(0,n.kt)("li",{parentName:"ul"},"If ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," is triggered with object but without property ",(0,n.kt)("inlineCode",{parentName:"li"},"field"),", target for this ",(0,n.kt)("inlineCode",{parentName:"li"},"field")," will not be triggered")),(0,n.kt)("h3",{id:"arguments-2"},"Arguments"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"targets")," ",(0,n.kt)("inlineCode",{parentName:"li"},"(Record<string, Event<T> | Store<T> | Effect<T>>)")," \u2014 Flat object which key is key in ",(0,n.kt)("inlineCode",{parentName:"li"},"source")," payload, and value is unit to store value to.")),(0,n.kt)("h3",{id:"returns-1"},"Returns"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"source")," ",(0,n.kt)("inlineCode",{parentName:"li"},"(Event<T>)")," \u2014 Source event, data passed to it should be an object with fields from ",(0,n.kt)("inlineCode",{parentName:"li"},"targets"))))}c.isMDXComponent=!0}}]);