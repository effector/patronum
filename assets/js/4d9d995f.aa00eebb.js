"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[876],{4852:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(9231);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,h=c["".concat(i,".").concat(d)]||c[d]||m[d]||o;return r?n.createElement(h,s(s({ref:t},u),{},{components:r})):n.createElement(h,s({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9333:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(4011),a=(r(9231),r(4852));const o={},s="reshape",l={unversionedId:"reshape/readme",id:"reshape/readme",title:"reshape",description:"result = reshape({ source, shape })",source:"@site/../src/reshape/readme.md",sourceDirName:"reshape",slug:"/reshape/",permalink:"/methods/reshape/",draft:!1,editUrl:"https://github.com/effector/patronum/tree/main/src/../src/reshape/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"methodsSidebar",previous:{title:"reset",permalink:"/methods/reset/"},next:{title:"snapshot",permalink:"/methods/snapshot/"}},i={},p=[{value:"<code>result = reshape({ source, shape })</code>",id:"result--reshape-source-shape-",level:2},{value:"Motivation",id:"motivation",level:3},{value:"Formulae",id:"formulae",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"Creates much stores from single string",id:"creates-much-stores-from-single-string",level:4},{value:"Destructure object",id:"destructure-object",level:4}],u={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reshape"},"reshape"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { reshape } from 'patronum';\n// or\nimport { reshape } from 'patronum/reshape';\n")),(0,a.kt)("h2",{id:"result--reshape-source-shape-"},(0,a.kt)("inlineCode",{parentName:"h2"},"result = reshape({ source, shape })")),(0,a.kt)("h3",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"This method allows to create many stores from single store at once.\nIt useful when you want to read many properties from object to different stores."),(0,a.kt)("h3",{id:"formulae"},"Formulae"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"result = reshape({ source, shape });\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Call each function in ",(0,a.kt)("inlineCode",{parentName:"li"},"shape")," object with data from ",(0,a.kt)("inlineCode",{parentName:"li"},"source"),", and create store with the same name as key in ",(0,a.kt)("inlineCode",{parentName:"li"},"shape")),(0,a.kt)("li",{parentName:"ul"},"If function in ",(0,a.kt)("inlineCode",{parentName:"li"},"shape")," returns ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"),", the same store will contain ",(0,a.kt)("inlineCode",{parentName:"li"},"null"),", because store cannot contain ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,a.kt)("h3",{id:"arguments"},"Arguments"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"source")," (",(0,a.kt)("a",{parentName:"li",href:"https://effector.dev/docs/api/effector/store"},(0,a.kt)("em",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"em"},"Store"))),") \u2014 Source store, data from this unit passed to each function in ",(0,a.kt)("inlineCode",{parentName:"li"},"shape")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"shape")," (",(0,a.kt)("inlineCode",{parentName:"li"},"{ [key: string]: (payload: T) => any }"),") \u2014 Object of functions. Function receives payload of ",(0,a.kt)("inlineCode",{parentName:"li"},"source")," as single argument, should return any value.")),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"result")," (",(0,a.kt)("inlineCode",{parentName:"li"},"{ [key: string]: Store<any> }"),") \u2014 Object of stores, that created with the same structure as ",(0,a.kt)("inlineCode",{parentName:"li"},"shape"),", with data from passed functions")),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("h4",{id:"creates-much-stores-from-single-string"},"Creates much stores from single string"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from 'effector';\nimport { reshape } from 'patronum/reshape';\n\nconst $original = createStore<string>('Example');\n\nconst result = reshape({\n  source: $original,\n  shape: {\n    length: (string) => string.length,\n    lowercase: (string) => string.toLowerCase(),\n    uppercase: (string) => string.toUpperCase(),\n  },\n});\n\n// result.length: Store<number>;\n// result.lowercase: Store<string>;\n// result.uppercase: Store<string>;\n\nresult.length.watch((length) => console.log('String length:', length));\nresult.lowercase.watch((lowercase) => console.log('lowercase:', lowercase));\n")),(0,a.kt)("h4",{id:"destructure-object"},"Destructure object"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from 'effector';\nimport { reshape } from 'patronum/reshape';\n\nconst $user = createStore({\n  name: 'Sergey',\n  lastname: 'Sova',\n  age: 26,\n});\n\nconst { name, lastname, age } = reshape({\n  source: $user,\n  shape: {\n    name: (user) => user.name,\n    lastname: (user) => user.lastname,\n    age: ({ age }) => age,\n  },\n});\n\nname.watch((name) => console.info('name updated', name));\nlastname.watch((lastname) => console.info('lastname updated', lastname));\nage.watch((age) => console.info('age updated', age));\n\n// => name updated Sergey\n// => lastname updated Sova\n// => age updated 26\n")))}m.isMDXComponent=!0}}]);