"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[236],{4852:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>p});var o=n(9231);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=o.createContext({}),u=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},f="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),f=u(n),d=l,p=f["".concat(c,".").concat(d)]||f[d]||m[d]||a;return n?o.createElement(p,i(i({ref:t},s),{},{components:n})):o.createElement(p,i({ref:t},s))}));function p(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=d;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[f]="string"==typeof e?e:l,i[1]=r;for(var u=2;u<a;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>u});var o=n(4011),l=(n(9231),n(4852));const a={},i="inFlight",r={unversionedId:"in-flight/readme",id:"in-flight/readme",title:"inFlight",description:"inFlight(effects)",source:"@site/../src/in-flight/readme.md",sourceDirName:"in-flight",slug:"/in-flight/",permalink:"/methods/in-flight/",draft:!1,editUrl:"https://github.com/effector/patronum/tree/main/src/../src/in-flight/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"methodsSidebar",previous:{title:"format",permalink:"/methods/format/"},next:{title:"interval",permalink:"/methods/interval/"}},c={},u=[{value:"<code>inFlight(effects)</code>",id:"inflighteffects",level:2},{value:"Motivation",id:"motivation",level:3},{value:"Formulae",id:"formulae",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"<code>inFlight({ domain })</code>",id:"inflight-domain-",level:2},{value:"Motivation",id:"motivation-1",level:3},{value:"Formulae",id:"formulae-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Returns",id:"returns-1",level:2},{value:"Example",id:"example-1",level:2},{value:"<code>inFlight({ effects: [] })</code>",id:"inflight-effects--",level:2},{value:"Motivation",id:"motivation-2",level:3},{value:"Formulae",id:"formulae-2",level:3},{value:"Arguments",id:"arguments-2",level:3},{value:"Returns",id:"returns-2",level:2},{value:"Example",id:"example-2",level:2}],s={toc:u},f="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(f,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"inflight"},"inFlight"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { inFlight } from 'patronum';\n// or\nimport { inFlight } from 'patronum/in-flight';\n")),(0,l.kt)("h2",{id:"inflighteffects"},(0,l.kt)("inlineCode",{parentName:"h2"},"inFlight(effects)")),(0,l.kt)("admonition",{title:"since",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"patronum 2.1.0\nUse ",(0,l.kt)("inlineCode",{parentName:"p"},"inFlight({ effects })")," with patronum < 2.1.0")),(0,l.kt)("h3",{id:"motivation"},"Motivation"),(0,l.kt)("p",null,"Method allows to calculate total current in flight states of each passed effect.\nIt is useful when you want to show pending state of complex process."),(0,l.kt)("h3",{id:"formulae"},"Formulae"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"$count = inFlight([fx1, fx2]);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Count all pending runs of effects in one store")),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"effects")," ",(0,l.kt)("inlineCode",{parentName:"li"},"(Array<Effect<any, any, any>>)")," - array of any effects")),(0,l.kt)("h2",{id:"returns"},"Returns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$count")," ",(0,l.kt)("inlineCode",{parentName:"li"},"(Store<number>)")," - Store with count of run effects in pending state")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { createEffect } from 'effector';\nimport { inFlight } from 'patronum/in-flight';\n\nconst loadFirst = createEffect().use(() => Promise.resolve(null));\nconst loadSecond = createEffect().use(() => Promise.resolve(2));\nconst $count = inFlight([loadFirst, loadSecond]);\n\n$count.watch((count) => console.info(`count: ${count}`));\n// => count: 0\n\nloadFirst();\nloadSecond();\n// => count: 2\n\nloadSecond();\nloadSecond();\n// => count: 4\n\n// Wait to resolve all effects\n// => count: 0\n")),(0,l.kt)("h2",{id:"inflight-domain-"},(0,l.kt)("inlineCode",{parentName:"h2"},"inFlight({ domain })")),(0,l.kt)("h3",{id:"motivation-1"},"Motivation"),(0,l.kt)("p",null,"This overload allows to count effects in flight of the whole domain.\nIt is useful when you want to show loading state of the whole application."),(0,l.kt)("h3",{id:"formulae-1"},"Formulae"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"$count = inFlight({ domain });\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Count all pending runs of effects in passed domain in one store")),(0,l.kt)("h3",{id:"arguments-1"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"domain")," ",(0,l.kt)("inlineCode",{parentName:"li"},"(Domain)")," - domain to count effects from")),(0,l.kt)("h2",{id:"returns-1"},"Returns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$count")," ",(0,l.kt)("inlineCode",{parentName:"li"},"(Store<number>)")," - Store with count of run effects in pending state")),(0,l.kt)("h2",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { createDomain } from 'effector';\nimport { inFlight } from 'patronum/in-flight';\n\nconst app = createDomain();\nconst loadFirst = app.createEffect().use(() => Promise.resolve(null));\nconst loadSecond = app.createEffect().use(() => Promise.resolve(2));\nconst $count = inFlight({ domain: app });\n\n$count.watch((count) => console.info(`count: ${count}`));\n// => count: 0\n\nloadFirst();\nloadSecond();\n// => count: 2\n\nloadSecond();\nloadSecond();\n// => count: 4\n\n// Wait to resolve all effects\n// => count: 0\n")),(0,l.kt)("h2",{id:"inflight-effects--"},(0,l.kt)("inlineCode",{parentName:"h2"},"inFlight({ effects: [] })")),(0,l.kt)("h3",{id:"motivation-2"},"Motivation"),(0,l.kt)("p",null,"This overload receives ",(0,l.kt)("inlineCode",{parentName:"p"},"effects")," as an object. May be useful for additional clarity, but it's longer to write"),(0,l.kt)("h3",{id:"formulae-2"},"Formulae"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"$count = inFlight({ effects: [fx1, fx2] });\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Count all pending runs of effects in one store")),(0,l.kt)("h3",{id:"arguments-2"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"effects")," ",(0,l.kt)("inlineCode",{parentName:"li"},"(Array<Effect<any, any, any>>)")," - array of any effects")),(0,l.kt)("h2",{id:"returns-2"},"Returns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$count")," ",(0,l.kt)("inlineCode",{parentName:"li"},"(Store<number>)")," - Store with count of run effects in pending state")),(0,l.kt)("h2",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { createEffect } from 'effector';\nimport { inFlight } from 'patronum/in-flight';\n\nconst loadFirst = createEffect().use(() => Promise.resolve(null));\nconst loadSecond = createEffect().use(() => Promise.resolve(2));\nconst $count = inFlight({ effects: [loadFirst, loadSecond] });\n\n$count.watch((count) => console.info(`count: ${count}`));\n// => count: 0\n\nloadFirst();\nloadSecond();\n// => count: 2\n\nloadSecond();\nloadSecond();\n// => count: 4\n\n// Wait to resolve all effects\n// => count: 0\n")))}m.isMDXComponent=!0}}]);